/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Controller, Post, Get, Body, HttpStatus, HttpException, Param, Res, Query, Req } from '@nestjs/common';
import { Response } from 'express';
import { MusteriService } from './musteri.service';
import { CreateMusteriDto } from '../dto/create-musteri.dto';
import { CikisYapDto } from '../dto/cikis-yap.dto';
import { DatabaseTransactionService } from '../database/database-transaction.service';
import { DatabaseConfigService } from '../database/database-config.service';
import * as PDFDocument from 'pdfkit';
import * as XLSX from 'xlsx';
import * as fs from 'fs';
import * as path from 'path';
import { QueryRunner } from 'typeorm';
//import { MusteriBilgi } from '../dto/musteri-bilgi.dto';

@Controller('musteri')
export class MusteriController {
  constructor(
    private readonly musteriService: MusteriService,
    private readonly transactionService: DatabaseTransactionService,
    private readonly dbConfig: DatabaseConfigService
  ) {}

  // G√ºvenli dosya adƒ± olu≈üturucu - HTTP header uyumlu ASCII-only
  private createSafeFileName(fileName: string): string {
    return fileName
      .replace(/[<>:"/\\|?*]/g, '_') // Yasak karakterleri alt √ßizgi ile deƒüi≈ütir
      .replace(/\s+/g, '_') // Bo≈üluklarƒ± alt √ßizgi ile deƒüi≈ütir
      // T√ºrk√ße karakterleri ASCII kar≈üƒ±lƒ±klarƒ± ile deƒüi≈ütir
      .replace(/[√ß√á]/g, 'c')
      .replace(/[ƒüƒû]/g, 'g')
      .replace(/[ƒ±ƒ∞]/g, 'i')
      .replace(/[√∂√ñ]/g, 'o')
      .replace(/[≈ü≈û]/g, 's')
      .replace(/[√º√ú]/g, 'u')
      // Diƒüer √∂zel karakterleri kaldƒ±r (sadece ASCII bƒ±rak)
      .replace(/[^\x00-\x7F]/g, '_')
      .substring(0, 100); // Maksimum 100 karakter
  }

  // Tarih formatƒ± helper fonksiyonu - g√ºvenli tarih d√∂n√º≈üt√ºrme
  private formatDate(date: Date | string | null | undefined): string {
    if (!date) return '';
    
    let dateObj: Date;
    
    if (typeof date === 'string') {
      // Bo≈ü string kontrol√º
      if (date.trim() === '') return '';
      
      // DD.MM.YYYY formatƒ±nƒ± kontrol et ve d√∂n√º≈üt√ºr
      if (/^\d{2}\.\d{2}\.\d{4}$/.test(date)) {
        const [day, month, year] = date.split('.');
        dateObj = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      } else {
        dateObj = new Date(date);
      }
    } else {
      dateObj = date;
    }
    
    // Date objesi ge√ßerli mi kontrol et
    if (isNaN(dateObj.getTime())) {
      console.warn('Ge√ßersiz tarih:', date);
      return '';
    }
    
    const day = dateObj.getDate().toString().padStart(2, '0');
    const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
    const year = dateObj.getFullYear();
    return `${day}.${month}.${year}`;
  }

  // T√ºrk√ße karakter destekli font dosyasƒ± kontrol fonksiyonu
  private getFontPath(): string {
    const possiblePaths = [
      // DejaVu Sans - En iyi T√ºrk√ße karakter desteƒüi
      './fonts/DejaVuSans.ttf',
      './backend/fonts/DejaVuSans.ttf',
      path.join(__dirname, '../fonts/DejaVuSans.ttf'),
      path.join(__dirname, '../../fonts/DejaVuSans.ttf'),
      path.join(process.cwd(), 'fonts/DejaVuSans.ttf'),
      path.join(process.cwd(), 'backend/fonts/DejaVuSans.ttf'),
      
      // Sistem fontlarƒ± - Linux
      '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
      '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
      '/usr/share/fonts/TTF/DejaVuSans.ttf',
      
      // Sistem fontlarƒ± - Windows
      'C:\\Windows\\Fonts\\arial.ttf',
      'C:\\Windows\\Fonts\\calibri.ttf',
      'C:\\Windows\\Fonts\\tahoma.ttf',
      
      // Sistem fontlarƒ± - macOS
      '/System/Library/Fonts/Arial.ttf',
      '/System/Library/Fonts/Helvetica.ttc',
      '/Library/Fonts/Arial.ttf'
    ];

    for (const fontPath of possiblePaths) {
      try {
        if (fs.existsSync(fontPath)) {
          console.log('T√ºrk√ße destekli font bulundu:', fontPath);
          return fontPath;
        }
      } catch (error) {
        console.warn('Font kontrol hatasƒ±:', fontPath, error);
      }
    }

    console.warn('T√ºrk√ße destekli font dosyasƒ± bulunamadƒ±, sistem fontu kullanƒ±lacak');
    return '';
  }

  @Post()
  async create(@Body() createMusteriDto: CreateMusteriDto) {
    try {
      return await this.musteriService.create(createMusteriDto);
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Post('musteri-ekle')
  async createMusteriEkle(@Body() createMusteriDto: CreateMusteriDto) {
    try {
      return await this.musteriService.create(createMusteriDto);
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Post('musteri-islem')
  async createMusteriIslem(@Body() musteriData: any, @Req() req) {
    try {
      console.log('=== musteri-islem endpoint called (Transaction-Safe) ===');
      console.log('musteriData.MstrTCN:', musteriData.MstrTCN);
      console.log('musteriData.OdaYatak:', musteriData.OdaYatak);
    
      const kullaniciAdi = req.user?.username || musteriData.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // üîí TRANSACTION ƒ∞√áƒ∞NDE T√úM ƒ∞≈ûLEMLERƒ∞ G√úVENLƒ∞ √áALI≈ûTIR
      const result = await this.transactionService.executeInTransaction(async (queryRunner) => {
        // 1. √ñnce oda-yatak m√ºsaitlik kontrol√º yap (race condition √∂nlemi)
        const musaitlikKontrol = await this.musteriService.checkOdaYatakMusaitlik(
          musteriData.OdaYatak as string | { label?: string; value?: string }
        );
        if (!musaitlikKontrol.musait) {
          // Kƒ∞RLƒ∞ ise kullanƒ±cƒ± onayƒ± gerektirir
          if (musaitlikKontrol.message === 'Kƒ∞RLƒ∞') {
            const onay = Boolean(musteriData?.kirliOnay);
            if (!onay) {
              throw new Error('Se√ßilen Oda Kƒ∞RLƒ∞. L√ºtfen onay verin veya ba≈üka oda se√ßin.');
            }
            // Onay verildiyse, devam etmeden √∂nce odanƒ±n Kƒ∞RLƒ∞ bilgisini temizle (BO≈û yap)
            // Lokal parse: "626-1" veya { value: '626-1' }
            let odaNo = '', yatakNo = '';
            const raw = musteriData.OdaYatak;
            if (typeof raw === 'string') {
              const parts = raw.split('-');
              odaNo = parts[0]?.trim() || '';
              yatakNo = parts[1]?.trim() || '';
            } else if (raw && typeof raw === 'object') {
              const val = String(raw.value || raw.label || '');
              const parts = val.split('-');
              odaNo = parts[0]?.trim() || '';
              yatakNo = parts[1]?.trim() || '';
            }
            const schemaName = this.dbConfig.getTableSchema();
            const bugunTarihi = this.formatDate(new Date());
            await this.transactionService.executeQuery(
              queryRunner,
              `UPDATE ${schemaName}.tblOdaYatak SET odYatDurum = 'BO≈û', odYatKllnc = @2, oKytTarihi = @3 WHERE odYatOdaNo = @0 AND odYatYtkNo = @1`,
              [odaNo, yatakNo, kullaniciAdi, bugunTarihi]
            );
          } else {
            throw new Error(musaitlikKontrol.message);
          }
        }
        
        // 2. TC kimlik kontrol√º yap
        const tcExists = await this.musteriService.checkTCExists(String(musteriData.MstrTCN));
        let musteriNo: number;
        let message: string;
        let musteriDurumu: string;
        
        if (tcExists) {
          // Mevcut m√º≈üteri - sadece m√º≈üteri numarasƒ±nƒ± al
          console.log('Mevcut m√º≈üteri tespit edildi');
          const musteriData_existing = await this.musteriService.getMusteriBilgiByTCN(String(musteriData.MstrTCN));
          if (!musteriData_existing) {
            throw new Error('M√º≈üteri kaydƒ± bulunamadƒ±');
          }
          musteriNo = musteriData_existing.MstrNo;
          message = 'Mevcut m√º≈üteri i√ßin konaklama kaydƒ± ba≈üarƒ±yla eklendi!';
          
          // Mevcut m√º≈üteri durumuna g√∂re belirle
          const durumKontrol = await this.musteriService.checkMusteriDurum(String(musteriData.MstrTCN));
          musteriDurumu = durumKontrol.durum === 'AYRILDI' ? 'AYRILAN_MUSTERI' : 'MEVCUT_MUSTERI';
          
          // AYRILDI durumundaki m√º≈üteriyi tekrar KALIYOR yap (Transaction i√ßinde)
          if (durumKontrol.durum === 'AYRILDI') {
            console.log('AYRILDI durumundaki m√º≈üteri KALIYOR durumuna g√ºncelleniyor...');
            await this.transactionService.executeQuery(
              queryRunner,
              `UPDATE ${this.dbConfig.getTableName('tblMusteri')} SET MstrDurum = 'KALIYOR' WHERE MstrTCN = @0`,
              [String(musteriData.MstrTCN)]
            );
            console.log('M√º≈üteri durumu AYRILDI -> KALIYOR g√ºncellendi (Transaction-Safe)');
          }
          
          console.log('Mevcut m√º≈üteri numarasƒ±:', musteriNo, 'Durum:', musteriDurumu);
        } else {
          // Yeni m√º≈üteri - m√º≈üteri ve cari kaydƒ± yap (Transaction i√ßinde)
          console.log('Yeni m√º≈üteri tespit edildi');
          const createResult = await this.musteriService.createMusteriIslemWithTransaction(
            queryRunner, 
            musteriData as CreateMusteriDto
          );
          musteriNo = createResult.musteriNo;
          message = 'Yeni m√º≈üteri ve konaklama kaydƒ± ba≈üarƒ±yla eklendi!';
          musteriDurumu = 'YENI';
          
          console.log('Yeni m√º≈üteri numarasƒ±:', musteriNo);
        }
        
        // Her durumda konaklama kaydƒ± yap (Transaction i√ßinde)
        console.log('Konaklama kaydƒ± yapƒ±lƒ±yor (Transaction-Safe)...');
        await this.musteriService.kaydetKonaklamaWithTransaction(queryRunner, { 
          ...musteriData, 
          MstrKllnc: kullaniciAdi,
          planlananCikisTarihi: musteriData.planlananCikisTarihi // Frontend'den gelen planlanan √ßƒ±kƒ±≈ü tarihi
        }, musteriNo);
        
        // ƒ∞≈ülem kaydƒ± yap (Transaction i√ßinde)
        console.log('ƒ∞≈ülem kaydƒ± yapƒ±lƒ±yor (Transaction-Safe)...');
        const islemDataWithExtras = {
          ...musteriData,
          musteriDurumu: musteriDurumu,
          OdemeVadesi: musteriData.OdemeVadesi || null, // üî• √ñdeme vadesi bilgisi eklendi
          planlananCikisTarihi: musteriData.planlananCikisTarihi, // Frontend'den gelen planlanan √ßƒ±kƒ±≈ü tarihi
          depozito: musteriData.depozito || null
        };
        
        await this.musteriService.kaydetIslemWithTransaction(queryRunner, islemDataWithExtras, musteriNo);
        
        return {
          success: true,
          message: message,
          data: { musteriNo: musteriNo }
        };
      });
      
      return result;
      
    } catch (error) {
      console.error('M√º≈üteri i≈ülem hatasƒ±:', error);
      
      // HttpException ise direkt fƒ±rlat (oda-yatak dolu mesajlarƒ± vs.)
      if (error instanceof HttpException) {
        throw error;
      }
      
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: `M√º≈üteri i≈ülem ba≈üarƒ±sƒ±z (Transaction g√ºvenliƒüi ile): ${error.message}`
        };
      }
      return {
        success: false,
        message: `M√º≈üteri i≈ülem ba≈üarƒ±sƒ±z (Transaction g√ºvenliƒüi ile): ${String(error)}`
      };
    }
  }

  @Get('firma-listesi')
  async getFirmaList() {
    try {
      const firmaList = await this.musteriService.getFirmaList();
      return {
        success: true,
        data: firmaList
      };
    } catch {
      throw new HttpException({
        success: false,
        message: 'Firma listesi alƒ±namadƒ±'
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Get('firma-detay/:firmaName')
  async getFirmaDetails(@Param('firmaName') firmaName: string) {
    try {
      const firmaDetails = await this.musteriService.getFirmaDetails(firmaName);
      return {
        success: true,
        data: firmaDetails
      };
    } catch {
      throw new HttpException({
        success: false,
        message: 'Firma detaylarƒ± alƒ±namadƒ±'
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Post('firma-guncelle')
  async updateFirmaInfo(@Body() updateData: { firmaName: string; MstrVD?: string; MstrVno?: string; MstrFrmTel?: string; MstrFrmMdr?: string; MstrMdrTel?: string }) {
    try {
      await this.musteriService.updateFirmaInfo(updateData.firmaName, updateData);
      return {
        success: true,
        message: 'Firma bilgileri g√ºncellendi'
      };
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Get('oda-tipleri')
  async getOdaTipleri() {
    try {
      const odaTipleri = await this.musteriService.getOdaTipleri();
      return {
        success: true,
        data: odaTipleri
      };
    } catch {
      throw new HttpException({
        success: false,
        message: 'Oda tipleri alƒ±namadƒ±'
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // Sadece bo≈ü odalarƒ±n bulunduƒüu oda tiplerini getir
  @Get('bos-oda-tipleri')
  async getBosOdaTipleri() {
    try {
      const bosOdaTipleri = await this.musteriService.getBosOdaTipleri();
      return {
        success: true,
        data: bosOdaTipleri
      };
    } catch {
      throw new HttpException({
        success: false,
        message: 'Bo≈ü oda tipleri alƒ±namadƒ±'
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Get('bos-odalar/:odaTipi')
  async getBosOdalar(@Param('odaTipi') odaTipi: string) {
    try {
      const bosOdalar = await this.musteriService.getBosOdalar(odaTipi)
      return {
        success: true,
        data: bosOdalar
      }
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Get('oda-tip-fiyatlari/:odaTipi')
  async getOdaTipFiyatlari(@Param('odaTipi') odaTipi: string) {
    try {
      const fiyatlar = await this.musteriService.getOdaTipFiyatlari(odaTipi)
      return {
        success: true,
        data: fiyatlar
      }
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Get('musteri-kontrol/:tcn')
  async checkMusteriExists(@Param('tcn') tcn: string) {
    try {
      const exists = await this.musteriService.checkTCExists(tcn);
      return {
        success: true,
        exists: exists
      };
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Get('musteri-durum-kontrol/:tcn')
  async checkMusteriDurum(@Param('tcn') tcn: string) {
    try {
      const result = await this.musteriService.checkMusteriDurum(tcn);
      return {
        success: true,
        data: result
      };
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Get('musteri-bilgi/:tcn')
  async getMusteriBilgi(@Param('tcn') tcn: string) {
    try {
      const musteriData = await this.musteriService.getMusteriBilgiByTCN(tcn);
      return {
        success: true,
        data: musteriData
      };
    } catch (error) {
      console.error('M√º≈üteri bilgileri alƒ±nƒ±rken hata:', error);
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          data: null,
          message: error.message
        };
      }
      return {
        success: false,
        data: null,
        message: String(error)
      };
    }
  }

  @Get('musteri-bilgi-by-no/:mstrNo')
  async getMusteriBilgiByNo(@Param('mstrNo') mstrNo: string) {
    try {
      const musteriData = await this.musteriService.getMusteriBilgiByNo(parseInt(mstrNo));
      return {
        success: true,
        data: musteriData
      };
    } catch (error) {
      console.error('M√º≈üteri bilgileri (MstrNo) alƒ±nƒ±rken hata:', error);
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: 'M√º≈üteri bilgileri alƒ±namadƒ±',
          error: error.message
        };
      }
      return {
        success: false,
        message: 'M√º≈üteri bilgileri alƒ±namadƒ±',
        error: String(error)
      };
    }
  }

  @Get('musteri-odeme-vadesi/:tcn')
  async getMusteriOdemeVadesi(@Param('tcn') tcn: string) {
    try {
      const odemeVadesi = await this.musteriService.getMusteriOdemeVadesi(tcn);
      return {
        success: true,
        data: { odemeVadesi }
      };
    } catch (error) {
      console.error('M√º≈üteri √∂deme vadesi alƒ±nƒ±rken hata:', error);
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: 'M√º≈üteri √∂deme vadesi alƒ±namadƒ±',
          error: error.message
        };
      }
      return {
        success: false,
        message: 'M√º≈üteri √∂deme vadesi alƒ±namadƒ±',
        error: String(error)
      };
    }
  }

  @Get('mevcut-konaklama/:tcn')
  async getMevcutKonaklama(@Param('tcn') tcn: string) {
    try {
      const konaklamaData = await this.musteriService.getMevcutKonaklamaBilgisi(tcn);
      return {
        success: true,
        data: konaklamaData
      };
    } catch (error) {
      console.error('Mevcut konaklama bilgileri alƒ±nƒ±rken hata:', error);
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: 'Mevcut konaklama bilgileri alƒ±namadƒ±',
          error: error.message
        };
      }
      return {
        success: false,
        message: 'Mevcut konaklama bilgileri alƒ±namadƒ±',
        error: String(error)
      };
    }
  }

  @Post('musteri-guncelle/:tcn')
  async updateMusteri(@Param('tcn') tcn: string, @Body() updateData: any, @Req() req) {
    try {
      const kullaniciAdi = req.user?.username || updateData.kullaniciAdi;
      const result = await this.musteriService.updateMusteriBilgileri(tcn, updateData, kullaniciAdi);
      return {
        success: true,
        message: result.message
      };
    } catch (error) {
      console.error('M√º≈üteri g√ºncelleme hatasƒ±:', error);
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: error.message
        };
      }
      return {
        success: false,
        message: String(error)
      };
    }
  }

  @Post('oda-yatak-kontrol')
  async checkOdaYatakMusaitlik(@Body() body: { odaYatak: string }) {
    try {
      const result = await this.musteriService.checkOdaYatakMusaitlik(body.odaYatak);
      return {
        success: true,
        data: result
      };
    } catch (error) {
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return error.message;
      }
      return String(error);
    }
  }

  @Post('donem-yenileme')
  async donemYenileme(@Body() donemData: any, @Req() req) {
    try {
      console.log('=== donem-yenileme endpoint called (Transaction-Safe) ===');
      console.log('donemData.MstrTCN:', donemData.MstrTCN);
      console.log('donemData.eskiKnklmPlnTrh:', donemData.eskiKnklmPlnTrh);
      console.log('donemData.OdaYatak:', donemData.OdaYatak);
      console.log('donemData.KonaklamaSuresi:', donemData.KonaklamaSuresi);
      
      const kullaniciAdi = req.user?.username || donemData.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // üîí TRANSACTION ƒ∞√áƒ∞NDE T√úM ƒ∞≈ûLEMLERƒ∞ G√úVENLƒ∞ √áALI≈ûTIR
      const result = await this.transactionService.executeInTransaction(async (queryRunner) => {
        // 1. Mevcut konaklama kaydƒ±nƒ±n KnklmCksTrh'ni KnklmPlnTrh ile g√ºncelle
        console.log('Mevcut konaklama kaydƒ± sonlandƒ±rƒ±lƒ±yor (Transaction-Safe)...');
        await this.musteriService.sonlandirKonaklamaWithTransaction(
          queryRunner, 
          String(donemData.MstrTCN), 
          String(donemData.eskiKnklmPlnTrh)
        );
        
        // 2. M√º≈üteri numarasƒ±nƒ± al
        const musteriData_existing = await this.musteriService.getMusteriBilgiByTCN(String(donemData.MstrTCN));
        const musteriNo = musteriData_existing.MstrNo;
        
        // 3. Eski oda-yatak kaydƒ±nƒ± √∂nce BO≈û yap (sƒ±ra d√ºzeltildi)
        // G√ºvenli kar≈üƒ±la≈ütƒ±rma: eskiOdaYatak ‚â† yeni OdaYatak ise bo≈üalt
        if (donemData.eskiOdaYatak) {
          try {
            const { odaNo: yeniOdaNo, yatakNo: yeniYatakNo } = this.musteriService['parseOdaYatak'](donemData.OdaYatak);
            const { odaNo: eskiOdaNo, yatakNo: eskiYatakNo } = this.musteriService['parseOdaYatak'](donemData.eskiOdaYatak);
            const yeniKod = `${yeniOdaNo}-${yeniYatakNo}`;
            const eskiKod = `${eskiOdaNo}-${eskiYatakNo}`;
            if (yeniKod !== eskiKod) {
              await this.musteriService.bosaltOdaYatakWithTransaction(queryRunner, donemData.eskiOdaYatak, kullaniciAdi);
            }
          } catch {}
        }

        // 4. Yeni d√∂nem konaklama kaydƒ± yap (Transaction i√ßinde)
        console.log('Yeni d√∂nem konaklama kaydƒ± yapƒ±lƒ±yor (Transaction-Safe)...');
        const yeniKonaklamaData = {
          ...donemData,
          KnklmOdaTip: donemData.KnklmOdaTip,
          eskiKnklmPlnTrh: donemData.eskiKnklmPlnTrh,
          KonaklamaSuresi: donemData.KonaklamaSuresi,
          KonaklamaTipi: donemData.KonaklamaTipi,
          HesaplananBedel: donemData.HesaplananBedel,
          ToplamBedel: donemData.ToplamBedel,
          MstrKllnc: kullaniciAdi,
        };
        await this.musteriService.kaydetDonemYenilemeKonaklamaWithTransaction(
          queryRunner,
          yeniKonaklamaData,
          musteriNo
        );
        // SP sonrasƒ± yeni oda durumunu doƒürulama ama√ßlƒ± ek loglar kaldƒ±rƒ±ldƒ±

        // 4.1 Yeni oda-yatak kaydƒ±nƒ± DOLU yap (stored procedure beklenen g√ºncellemeyi yapmazsa g√ºvence)
        try {
          const { odaNo: yeniOdaNo, yatakNo: yeniYatakNo } = this.musteriService['parseOdaYatak'](donemData.OdaYatak);
          await this.musteriService.doluYapOdaYatakWithTransaction(queryRunner, `${yeniOdaNo}-${yeniYatakNo}`, kullaniciAdi);
        } catch {}
        
        // üî• Eƒüer eski oda-yatak bilgisi varsa, POST-SP: sadece eski ‚â† yeni ise BO≈û yap (ek g√ºvenlik)
        if (donemData.eskiOdaYatak) {
          try {
            const { odaNo: yeniOdaNo, yatakNo: yeniYatakNo } = this.musteriService['parseOdaYatak'](donemData.OdaYatak);
            const { odaNo: eskiOdaNo, yatakNo: eskiYatakNo } = this.musteriService['parseOdaYatak'](donemData.eskiOdaYatak);
            const yeniKod = `${yeniOdaNo}-${yeniYatakNo}`;
            const eskiKod = `${eskiOdaNo}-${eskiYatakNo}`;
            if (yeniKod !== eskiKod) {
              await this.musteriService.bosaltOdaYatakWithTransaction(queryRunner, donemData.eskiOdaYatak, kullaniciAdi);
            }
          } catch {}
        }
        
        // 4. Yeni d√∂nem i≈ülem kaydƒ± yap (Transaction i√ßinde)
        console.log('Yeni d√∂nem i≈ülem kaydƒ± yapƒ±lƒ±yor (Transaction-Safe)...');
        const yeniIslemData = {
          ...donemData,
          eskiKnklmPlnTrh: donemData.eskiKnklmPlnTrh,
          MstrKllnc: kullaniciAdi,
        };
        await this.musteriService.kaydetDonemYenilemeIslemWithTransaction(
          queryRunner, 
          yeniIslemData as {
            OdaYatak: string | { label?: string; value?: string };
            KonaklamaSuresi: number;
            KonaklamaTipi: string;
            MstrHspTip: string;
            MstrKllnc: string;
            MstrAdi: string;
            ToplamBedel: number;
            eskiKnklmPlnTrh: string;
          }, 
          musteriNo
        );
        
        return {
          success: true,
          message: 'D√∂nem yenileme ba≈üarƒ±yla tamamlandƒ±!',
          data: { musteriNo: musteriNo }
        };
      });
      
      return result;
      
    } catch (error) {
      console.error('D√∂nem yenileme hatasƒ±:', error);
      
      // HttpException ise direkt fƒ±rlat (oda-yatak dolu mesajlarƒ± vs.)
      if (error instanceof HttpException) {
        throw error;
      }
      
      // G√ºvenli ≈üekilde string mesaj d√∂nd√ºr
      if (error instanceof Error) {
        return {
          success: false,
          message: 'D√∂nem yenileme sƒ±rasƒ±nda hata olu≈ütu (Transaction g√ºvenliƒüi ile)',
          error: error.message
        };
      }
      return {
        success: false,
        message: 'D√∂nem yenileme sƒ±rasƒ±nda hata olu≈ütu (Transaction g√ºvenliƒüi ile)',
        error: String(error)
      };
    }
  }

  @Post('cikis-yap')
  async cikisYap(@Body() cikisYapDto: CikisYapDto, @Req() req) {
    try {
      // Kullanƒ±cƒ± adƒ±nƒ± req'den al
      const kullaniciAdi = req.user?.username || cikisYapDto.kullaniciAdi || 'admin';
      
      // üîí TRANSACTION ƒ∞√áƒ∞NDE T√úM ƒ∞≈ûLEMLERƒ∞ G√úVENLƒ∞ √áALI≈ûTIR
      await this.transactionService.executeInTransaction(async (queryRunner) => {
        await this.musteriService.musteriCikisYapWithTransaction(queryRunner, cikisYapDto, kullaniciAdi);
      });
      
      return { success: true, message: 'M√º≈üteri √ßƒ±kƒ±≈ü i≈ülemi ba≈üarƒ±yla tamamlandƒ± (Transaction g√ºvenliƒüi ile).' };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen bir hata olu≈ütu';
      console.error('√áƒ±kƒ±≈ü yapma hatasƒ± (controller):', errorMessage);
      throw new HttpException({
        status: HttpStatus.INTERNAL_SERVER_ERROR,
        error: `√áƒ±kƒ±≈ü i≈ülemi ba≈üarƒ±sƒ±z (Transaction g√ºvenliƒüi ile): ${errorMessage}`,
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Post('erken-cikis-yap')
  async erkenCikisYap(@Body() body: any, @Req() req) {
    try {
      console.log('=== /erken-cikis-yap endpoint √ßaƒürƒ±ldƒ± ===');
      console.log('Gelen veri:', body);
      // Kullanƒ±cƒ± adƒ± merkezi olarak alƒ±nƒ±r (JWT varsa req.user.username, yoksa body.kullaniciAdi)
      const kullaniciAdi = req.user?.username || body.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // T√ºm erken √ßƒ±kƒ±≈ü i≈ülemleri ve MstrDurum g√ºncellemesi service fonksiyonunda yapƒ±lacak
      await this.musteriService.erkenCikisYap({ ...body, kullaniciAdi });
      return { success: true, message: 'Erken √ßƒ±kƒ±≈ü i≈ülemi ba≈üarƒ±yla tamamlandƒ±.' };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen bir hata olu≈ütu';
      return {
        success: false,
        message: `Erken √ßƒ±kƒ±≈ü i≈ülemi ba≈üarƒ±sƒ±z: ${errorMessage}`
      };
    }
  }

  @Post('direkt-oda-degisikligi')
  async direktOdaDegisikligi(@Body() odaDegisikligiData: any, @Req() req) {
    try {
      console.log('=== direktOdaDegisikligi ba≈ülatƒ±ldƒ± ===');
      console.log('Gelen veri:', odaDegisikligiData);
      const kullaniciAdi = req.user?.username || odaDegisikligiData.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // Transaction i√ßinde t√ºm i≈ülemleri g√ºvenli √ßalƒ±≈ütƒ±r
      const result = await this.transactionService.executeInTransaction(async (queryRunner) => {
        // 1. M√º≈üteri bilgilerini al
        const musteriData = await this.musteriService.getMusteriBilgiByTCN(String(odaDegisikligiData.tcNo));
        if (!musteriData) {
          throw new Error('M√º≈üteri bulunamadƒ±');
        }
        const musteriNo = musteriData.MstrNo;

        // 2. tblKonaklama g√ºncelle (transaction i√ßinde)
        await this.musteriService.updateKonaklamaOdaDegisikligiWithTransaction(
          queryRunner,
          String(odaDegisikligiData.tcNo),
          String(odaDegisikligiData.yeniOdaTip),
          String(odaDegisikligiData.yeniOdaNo),
          String(odaDegisikligiData.yeniYatakNo),
          String(odaDegisikligiData.konaklamaNot || ''),
          Number(odaDegisikligiData.hesaplananBedel),
          kullaniciAdi
        );

        // 3. tblOdaYatak durumlarƒ± g√ºncelle (transaction i√ßinde)
        await this.musteriService.updateOdaYatakDurumlariWithTransaction(
          queryRunner,
          String(odaDegisikligiData.eskiOdaNo),
          String(odaDegisikligiData.eskiYatakNo),
          String(odaDegisikligiData.yeniOdaNo),
          String(odaDegisikligiData.yeniYatakNo)
        );

        // 4. Eƒüer √ºcret farkƒ± varsa tblislem kaydƒ± ekle (transaction i√ßinde)
        if (Number(odaDegisikligiData.hesaplananBedel) !== 0) {
          const islemTip = Number(odaDegisikligiData.hesaplananBedel) > 0 ? 'GELƒ∞R' : 'Gƒ∞DER';
          const islemTutar = Math.abs(Number(odaDegisikligiData.hesaplananBedel));

          await this.musteriService.kaydetOdaDegisikligiIslemWithTransaction(
            queryRunner,
            {
              musteriNo,
              islemTip,
              islemTutar,
              islemBilgi: odaDegisikligiData.konaklamaNot,
              yeniOdaYatak: { value: String(odaDegisikligiData.yeniOdaYatak), label: String(odaDegisikligiData.yeniOdaYatak) },
              MstrAdi: musteriData.MstrAdi,
              MstrKllnc: kullaniciAdi,
              MstrHspTip: musteriData.MstrHspTip,
              konaklamaTipi: odaDegisikligiData.konaklamaTipi || 'G√úNL√úK'
            }
          );
        }

        return { success: true, message: 'Oda deƒüi≈üikliƒüi ba≈üarƒ±yla tamamlandƒ±' };
      });

      return result;

    } catch (error) {
      console.error('direktOdaDegisikligi hatasƒ±:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      return { 
        success: false, 
        message: `Oda deƒüi≈üikliƒüi i≈ülemi ba≈üarƒ±sƒ±z: ${errorMessage}` 
      };
    }
  }

  @Post('direkt-oda-degisikligi-konaklama-suresi-1')
  async direktOdaDegisikligiKonaklamaSuresi1(@Body() odaDegisikligiData: any, @Req() req) {
    try {
      console.log('=== direktOdaDegisikligiKonaklamaSuresi1 ba≈ülatƒ±ldƒ± ===');
      console.log('Gelen veri:', odaDegisikligiData);
      console.log('Toplam Bedel:', odaDegisikligiData.toplamBedel);
      console.log('Konaklama Not:', odaDegisikligiData.konaklamaNot);
      console.log('Hesaplanan Bedel:', odaDegisikligiData.hesaplananBedel);
      const kullaniciAdi = req.user?.username || odaDegisikligiData.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // Transaction i√ßinde t√ºm i≈ülemleri g√ºvenli √ßalƒ±≈ütƒ±r
      const result = await this.transactionService.executeInTransaction(async (queryRunner) => {
        // 1. M√º≈üteri bilgilerini al
        const musteriData = await this.musteriService.getMusteriBilgiByTCN(String(odaDegisikligiData.tcNo));
        if (!musteriData) {
          throw new Error('M√º≈üteri bulunamadƒ±');
        }
        const musteriNo = musteriData.MstrNo;

        // 2. tblKonaklama g√ºncelle (transaction i√ßinde) - knklmNot'tan "D√∂nem Yenileme: " kƒ±smƒ±nƒ± √ßƒ±kar
        console.log('Orijinal konaklamaNot:', odaDegisikligiData.konaklamaNot);
        console.log('Orijinal konaklamaNot tipi:', typeof odaDegisikligiData.konaklamaNot);
        
        const konaklamaNot = typeof odaDegisikligiData.konaklamaNot === 'string'
          ? (odaDegisikligiData.konaklamaNot as string).replace('D√∂nem Yenileme: ', '')
          : '';
        
        console.log('ƒ∞≈ülenmi≈ü konaklamaNot:', konaklamaNot);
        
        await this.musteriService.updateKonaklamaOdaDegisikligiWithTransaction(
          queryRunner,
          String(odaDegisikligiData.tcNo),
          String(odaDegisikligiData.yeniOdaTip),
          String(odaDegisikligiData.yeniOdaNo),
          String(odaDegisikligiData.yeniYatakNo),
          String(konaklamaNot),
          Number(odaDegisikligiData.toplamBedel),
          kullaniciAdi
        );

        // 3. tblOdaYatak durumlarƒ± g√ºncelle (transaction i√ßinde)
        await this.musteriService.updateOdaYatakDurumlariWithTransaction(
          queryRunner,
          String(odaDegisikligiData.eskiOdaNo),
          String(odaDegisikligiData.eskiYatakNo),
          String(odaDegisikligiData.yeniOdaNo),
          String(odaDegisikligiData.yeniYatakNo)
        );

        // 4. Eƒüer √ºcret farkƒ± varsa tblislem kaydƒ± ekle (transaction i√ßinde)
        if (Number(odaDegisikligiData.hesaplananBedel) !== 0) {
          const islemTip = Number(odaDegisikligiData.hesaplananBedel) > 0 ? 'GELƒ∞R' : 'Gƒ∞DER';
          const islemTutar = Math.abs(Number(odaDegisikligiData.hesaplananBedel));

          await this.musteriService.kaydetOdaDegisikligiIslemWithTransaction(
            queryRunner,
            {
              musteriNo,
              islemTip,
              islemTutar,
              islemBilgi: String(odaDegisikligiData.ekNotlar || konaklamaNot),
              yeniOdaYatak: { value: String(odaDegisikligiData.yeniOdaYatak), label: String(odaDegisikligiData.yeniOdaYatak) },
              MstrAdi: String(musteriData.MstrAdi),
              MstrKllnc: kullaniciAdi,
              MstrHspTip: musteriData.MstrHspTip,
              konaklamaTipi: odaDegisikligiData.konaklamaTipi || 'G√úNL√úK'
            }
          );
        }

        return { success: true, message: 'Oda deƒüi≈üikliƒüi (1 g√ºn) ba≈üarƒ±yla tamamlandƒ±' };
      });

      return result;

    } catch (error) {
      console.error('direktOdaDegisikligiKonaklamaSuresi1 hatasƒ±:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      return { 
        success: false, 
        message: `Oda deƒüi≈üikliƒüi i≈ülemi ba≈üarƒ±sƒ±z: ${errorMessage}` 
      };
    }
  }

  @Post('oda-degisikligi-onayla')
  async odaDegisikligiOnayla(@Body() odaDegisikligiData: any, @Req() req) {
    try {
      console.log('=== oda-degisikligi-onayla endpoint ba≈ülatƒ±ldƒ± ===');
      console.log('Gelen veri:', odaDegisikligiData);
      const kullaniciAdi = req.user?.username || odaDegisikligiData.kullaniciAdi;
      if (!kullaniciAdi) {
        throw new Error('Kullanƒ±cƒ± adƒ± bulunamadƒ±!');
      }
      // üîí TRANSACTION ƒ∞√áƒ∞NDE T√úM ƒ∞≈ûLEMLERƒ∞ G√úVENLƒ∞ √áALI≈ûTIR
      const result = await this.transactionService.executeInTransaction(async (queryRunner) => {
        // 1. M√º≈üteri bilgilerini al
        const musteriData = await this.musteriService.getMusteriBilgiByTCN(String(odaDegisikligiData.tcNo));
        if (!musteriData) {
          throw new Error('M√º≈üteri bulunamadƒ±');
        }
        const musteriNo = musteriData.MstrNo;

        // 2. Mevcut konaklama kaydƒ±nƒ± g√ºncelle (√ßƒ±kƒ±≈ü tarihi ve kullanƒ±cƒ± adƒ±)
        await this.musteriService.sonlandirMevcutKonaklamaWithTransaction(
          queryRunner,
          String(odaDegisikligiData.tcNo),
          kullaniciAdi // Kullanƒ±cƒ± adƒ±
        );

        // 3. Yeni konaklama kaydƒ± olu≈ütur
        const yeniKonaklamaData = {
          OdaYatak: odaDegisikligiData.yeniOdaYatak,
          KonaklamaSuresi: Number(odaDegisikligiData.konaklamaSuresi),
          KonaklamaTipi: String(odaDegisikligiData.konaklamaTipi),
          HesaplananBedel: Number(odaDegisikligiData.hesaplananBedel),
          ToplamBedel: Number(odaDegisikligiData.toplamBedel),
          MstrKllnc: kullaniciAdi,
          KnklmOdaTip: String(odaDegisikligiData.yeniOdaTip),
          KnklmNot: String(odaDegisikligiData.ekNotlar || ''),
          eskiKnklmPlnTrh: String(odaDegisikligiData.eskiPlnTrh) // Giri≈ü tarihi olarak kullanƒ±lacak
        };

        await this.musteriService.kaydetYeniOdaKonaklamaWithTransaction(
          queryRunner,
          yeniKonaklamaData,
          Number(musteriNo)
        );

        // 4. Oda-yatak durumlarƒ±nƒ± g√ºncelle (eski BO≈û, yeni DOLU)
        await this.musteriService.updateOdaYatakDurumlariWithTransaction(
          queryRunner,
          String(odaDegisikligiData.eskiOdaNo),
          String(odaDegisikligiData.eskiYatakNo),
          String(odaDegisikligiData.yeniOdaNo),
          String(odaDegisikligiData.yeniYatakNo)
        );

        // 5. ƒ∞≈ülem kayƒ±tlarƒ± ekle (Gƒ∞DER ve/veya GELƒ∞R)
        if (Number(odaDegisikligiData.giderBedel) > 0) {
          await this.musteriService.kaydetOdaDegisikligiIslemWithTransaction(
            queryRunner,
            {
              musteriNo: Number(musteriNo),
              islemTip: 'Gƒ∞DER',
              islemTutar: Number(odaDegisikligiData.giderBedel),
              islemBilgi: `Oda Deƒüi≈üikliƒüi - Eski Oda: ${odaDegisikligiData.eskiOdaNo}-${odaDegisikligiData.eskiYatakNo}`,
              yeniOdaYatak: { value: `${odaDegisikligiData.eskiOdaNo}-${odaDegisikligiData.eskiYatakNo}`, label: `${odaDegisikligiData.eskiOdaNo}-${odaDegisikligiData.eskiYatakNo}` },
              MstrAdi: String(musteriData.MstrAdi),
              MstrKllnc: kullaniciAdi,
              MstrHspTip: musteriData.MstrHspTip,
              konaklamaTipi: odaDegisikligiData.konaklamaTipi || 'G√úNL√úK',
              OdemeVadesi: odaDegisikligiData.OdemeVadesi || musteriData.OdemeVadesi || null
            }
          );
        }

        if (Number(odaDegisikligiData.gelirBedel) > 0) {
          await this.musteriService.kaydetOdaDegisikligiIslemWithTransaction(
            queryRunner,
            {
              musteriNo: Number(musteriNo),
              islemTip: 'GELƒ∞R',
              islemTutar: Number(odaDegisikligiData.gelirBedel),
              islemBilgi: `Oda Deƒüi≈üikliƒüi - Yeni Oda: ${odaDegisikligiData.yeniOdaNo}-${odaDegisikligiData.yeniYatakNo}`,
              yeniOdaYatak: { value: `${odaDegisikligiData.yeniOdaNo}-${odaDegisikligiData.yeniYatakNo}`, label: `${odaDegisikligiData.yeniOdaNo}-${odaDegisikligiData.yeniYatakNo}` },
              MstrAdi: String(musteriData.MstrAdi),
              MstrKllnc: kullaniciAdi,
              MstrHspTip: musteriData.MstrHspTip,
              konaklamaTipi: odaDegisikligiData.konaklamaTipi || 'G√úNL√úK',
              OdemeVadesi: odaDegisikligiData.OdemeVadesi || musteriData.OdemeVadesi || null
            }
          );
        }

        return { 
          success: true, 
          message: 'Oda deƒüi≈üikliƒüi ba≈üarƒ±yla tamamlandƒ±! T√ºm i≈ülemler g√ºvenli bir ≈üekilde kaydedildi.' 
        };
      });

      return result;

    } catch (error) {
      console.error('oda-degisikligi-onayla hatasƒ±:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      
      throw new HttpException({
        status: HttpStatus.INTERNAL_SERVER_ERROR,
        error: `Oda deƒüi≈üikliƒüi onaylama i≈ülemi ba≈üarƒ±sƒ±z (Transaction g√ºvenliƒüi ile): ${errorMessage}`,
      }, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @Post('ek-hizmetler')
  async ekHizmetlerEkle(@Body() body: any) {
    try {
      const result = await this.transactionService.executeInTransaction(async (queryRunner: QueryRunner) => {
        // Gerekli alanlarƒ± body'den al
        const { musteriNo, MstrAdi, MstrKllnc, MstrHspTip, MstrKnklmTip, MstrOdaYatak, ekHizmetler } = body;
        if (!musteriNo || !MstrAdi || !MstrKllnc || !MstrHspTip || !MstrKnklmTip || !MstrOdaYatak || !Array.isArray(ekHizmetler) || ekHizmetler.length === 0) {
          throw new Error('Eksik veya hatalƒ± parametreler');
        }
        return await this.musteriService.kaydetEkHizmetlerWithTransaction(queryRunner, ekHizmetler, {
          musteriNo,
          MstrAdi,
          MstrKllnc,
          MstrHspTip,
          MstrKnklmTip,
          MstrOdaYatak
        });
      });
      return { success: true, message: result.message };
    } catch (error) {
      return { success: false, message: error instanceof Error ? error.message : String(error) };
    }
  }
  // Prod ortamƒ±nda test u√ßlarƒ±nƒ± kapat
  @Get('test-endpoint')
  getTest() {
    if (process.env.NODE_ENV === 'production') {
      return { success: false, message: 'Endpoint disabled in production' };
    }
    return { message: 'Test endpoint √ßalƒ±≈üƒ±yor!' };
  }

  @Get('test-simple')
  async testSimple() {
    if (process.env.NODE_ENV === 'production') {
      return { success: false, message: 'Endpoint disabled in production' };
    }
    try {
      return {
        success: true,
        message: 'Basit test endpoint √ßalƒ±≈üƒ±yor!',
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        message: 'Test endpoint hatasƒ±: ' + (error instanceof Error ? error.message : String(error))
      };
    }
  }

  // Konaklama Ge√ßmi≈üi PDF Raporu
  @Get('konaklama-gecmisi-pdf')
  async getKonaklamaGecmisiPDF(
    @Query('tcNo') tcNo: string,
    @Query('firmaAdi') firmaAdi: string,
    @Res() res: Response
  ) {
    try {
      let konaklamaGecmisi: any[] = [];
      let raporBaslik = '';

      if (firmaAdi) {
        // Firma konaklama ge√ßmi≈üi
        konaklamaGecmisi = await this.musteriService.getFirmaKonaklamaGecmisi(firmaAdi);
        raporBaslik = `${firmaAdi} - Firma Konaklama Ge√ßmi≈üi`;
      } else if (tcNo) {
        // M√º≈üteri konaklama ge√ßmi≈üi
        const musteriBilgi = await this.musteriService.getMusteriBilgiByTCN(tcNo);
        konaklamaGecmisi = await this.musteriService.getKonaklamaGecmisi(tcNo);
        raporBaslik = `${musteriBilgi?.MstrAdi || tcNo} - Konaklama Ge√ßmi≈üi`;
      } else {
        throw new Error('TC No veya Firma Adƒ± gerekli');
      }

      // PDF olu≈ütur - T√ºrk√ße karakter desteƒüi ile
      const doc = new PDFDocument({
        size: 'A4',
        margin: 50,
        info: {
          Title: raporBaslik,
          Author: 'G√ñK√áE PANSƒ∞YON',
          Subject: 'Konaklama Ge√ßmi≈üi Raporu',
          Creator: 'G√ñK√áE PANSƒ∞YON M√º≈üteri Takip Sistemi'
        }
      });
      
      // PDF buffer'ƒ± toplamak i√ßin
      const chunks: Buffer[] = [];
      doc.on('data', chunk => chunks.push(chunk));
      
      // T√ºrk√ße font'u y√ºkle ve kullan
      try {
        const fontPath = this.getFontPath();
        if (fontPath && fs.existsSync(fontPath)) {
          doc.registerFont('Turkish', fontPath);
          doc.font('Turkish');
        } else {
          // Font bulunamazsa fallback olarak Times-Roman kullan (daha iyi Unicode desteƒüi)
          doc.font('Times-Roman');
        }
      } catch (error) {
        console.warn('Font y√ºkleme hatasƒ±, varsayƒ±lan font kullanƒ±lƒ±yor:', error);
        doc.font('Times-Roman');
      }
      
      // Ba≈ülƒ±k
      doc.fontSize(16);
      doc.text(raporBaslik, 50, 50);
      
      // Tarih bilgileri
      doc.fontSize(10);
      doc.text(`Rapor Tarihi: ${new Date().toLocaleDateString('tr-TR')}`, 50, 80);
      doc.text(`Toplam Kayit: ${konaklamaGecmisi.length}`, 50, 95);
      
      // Tablo ba≈ülƒ±klarƒ±
      const headers = ['Tarih', 'Oda-Yatak', 'Tip', 'Tutar', 'Giris', 'Cikis'];
      let currentY = 120;
      
      doc.fontSize(9);
      headers.forEach((header, index) => {
        doc.text(header, 50 + (index * 85), currentY);
      });
      
      currentY += 25; // Ba≈ülƒ±k satƒ±rƒ± ile ilk veri satƒ±rƒ± arasƒ±nda optimal bo≈üluk
      
      // Veriler
      doc.fontSize(8);
      konaklamaGecmisi.slice(0, 30).forEach((row, index) => {
        if (currentY > 750) {
          doc.addPage();
          currentY = 50;
        }
        
        const tarih = this.formatDate(row.kKytTarihi);
        const odaYatak = `${row.KnklmOdaNo}-${row.KnklmYtkNo}`;
        const tip = row.KnklmTip || '';
        const tutar = row.KnklmNfyt ? `${row.KnklmNfyt} TL` : '';
        const giris = this.formatDate(row.KnklmGrsTrh);
        const cikis = this.formatDate(row.KnklmCksTrh);
        
        // H√ºcreleri yazdƒ±r - optimal spacing
        doc.text(tarih, 50, currentY);
        doc.text(odaYatak, 135, currentY);
        doc.text(tip, 220, currentY);
        doc.text(tutar, 305, currentY);
        doc.text(giris, 390, currentY);
        doc.text(cikis, 475, currentY);
        
        currentY += 20; // Optimal satƒ±r aralƒ±ƒüƒ±
      });
      
      // PDF'i sonlandƒ±r
      doc.end();
      
      // PDF hazƒ±r olduƒüunda g√∂nder
      doc.on('end', () => {
        try {
          const pdfBuffer = Buffer.concat(chunks);
          
          if (pdfBuffer.length === 0) {
            throw new Error('PDF buffer bo≈ü');
          }
          
          // Response headers - UTF-8 destekli
          res.setHeader('Content-Type', 'application/pdf; charset=utf-8');
          const safeFileName = this.createSafeFileName(`${raporBaslik}-${new Date().toISOString().split('T')[0]}.pdf`);
          const safeRaporBaslik = this.createSafeFileName(raporBaslik);
          res.setHeader('Content-Disposition', `attachment; filename="${safeFileName}"; filename*=UTF-8''${encodeURIComponent(`${safeRaporBaslik}-${new Date().toISOString().split('T')[0]}.pdf`)}`);
          res.setHeader('Content-Length', pdfBuffer.length);
          
          console.log(`PDF ba≈üarƒ±yla olu≈üturuldu: ${pdfBuffer.length} bytes`);
          res.send(pdfBuffer);
        } catch (bufferError) {
          console.error('PDF buffer hatasƒ±:', bufferError);
          res.status(500).json({ 
            success: false, 
            message: `PDF buffer hatasƒ±: ${bufferError.message}` 
          });
        }
      });
      
      // PDF error handling
      doc.on('error', (pdfError) => {
        console.error('PDF olu≈üturma hatasƒ±:', pdfError);
        if (!res.headersSent) {
          res.status(500).json({ 
            success: false, 
            message: `PDF olu≈üturma hatasƒ±: ${pdfError.message}` 
          });
        }
      });
    } catch (error) {
      console.error('PDF rapor hatasƒ±:', error);
      console.error('Error details:', {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
      res.status(500).json({ 
        success: false, 
        message: `PDF raporu olu≈üturulamadƒ±: ${error.message}` 
      });
    }
  }

  // Konaklama Ge√ßmi≈üi Excel Raporu
  @Get('konaklama-gecmisi-excel')
  async getKonaklamaGecmisiExcel(
    @Query('tcNo') tcNo: string,
    @Query('firmaAdi') firmaAdi: string,
    @Res() res: Response
  ) {
    try {
      let konaklamaGecmisi: any[] = [];
      let raporBaslik = '';

      if (firmaAdi) {
        // Firma konaklama ge√ßmi≈üi
        konaklamaGecmisi = await this.musteriService.getFirmaKonaklamaGecmisi(firmaAdi);
        raporBaslik = `${firmaAdi} - Firma Konaklama Ge√ßmi≈üi`;
      } else if (tcNo) {
        // M√º≈üteri konaklama ge√ßmi≈üi
        const musteriBilgi = await this.musteriService.getMusteriBilgiByTCN(tcNo);
        konaklamaGecmisi = await this.musteriService.getKonaklamaGecmisi(tcNo);
        raporBaslik = `${musteriBilgi?.MstrAdi || tcNo} - Konaklama Ge√ßmi≈üi`;
      } else {
        throw new Error('TC No veya Firma Adƒ± gerekli');
      }

      // Excel verilerini hazƒ±rla - temiz ve g√ºvenli format
      const excelData = konaklamaGecmisi.map(row => ({
        'Kayit Tarihi': this.formatDate(row.kKytTarihi) || '',
        'Oda-Yatak': `${row.KnklmOdaNo || ''}-${row.KnklmYtkNo || ''}`,
        'Konaklama Tipi': (row.KnklmTip || '').toString(),
        'Tutar (TL)': parseFloat(row.KnklmNfyt) || 0,
        'Giris Tarihi': this.formatDate(row.KnklmGrsTrh) || '',
        'Planlanan Cikis': this.formatDate(row.KnklmPlnTrh) || '',
        'Cikis Tarihi': this.formatDate(row.KnklmCksTrh) || '',
        'Not': (row.KnklmNot || '').toString()
      }));

      // Excel workbook olu≈ütur - minimal ve g√ºvenli yakla≈üƒ±m
      const workbook = XLSX.utils.book_new();
      
      // Worksheet olu≈ütur - otomatik header detection
      const worksheet = XLSX.utils.json_to_sheet(excelData);

      // Workbook'a worksheet ekle - basit isim
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');

      // Excel dosyasƒ±nƒ± olu≈ütur - minimal options
      const excelBuffer = XLSX.write(workbook, { 
        type: 'buffer', 
        bookType: 'xlsx'
      });

      // Response headers - UTF-8 destekli
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      const safeExcelFileName = this.createSafeFileName(`${raporBaslik}-${Date.now()}.xlsx`);
      const safeRaporBaslik = this.createSafeFileName(raporBaslik);
      res.setHeader('Content-Disposition', `attachment; filename="${safeExcelFileName}"; filename*=UTF-8''${encodeURIComponent(`${safeRaporBaslik}-${Date.now()}.xlsx`)}`);
      res.setHeader('Content-Length', excelBuffer.length);

      res.send(excelBuffer);
    } catch (error) {
      console.error('Excel rapor hatasƒ±:', error);
      res.status(500).json({ 
        success: false, 
        message: 'Excel raporu olu≈üturulamadƒ±' 
      });
    }
  }

  // Cari Hareketler PDF Raporu
  @Get('cari-hareketler-pdf')
  async getCariHareketlerPDF(
    @Query('tcNo') tcNo: string,
    @Query('firmaAdi') firmaAdi: string,
    @Query('cariKod') cariKod: string,
    @Res() res: Response
  ) {
    try {
      let hareketler: any[] = [];
      let raporBaslik = '';
      if (cariKod) {
        hareketler = await this.musteriService.getCariHareketlerByCariKod(cariKod);
        raporBaslik = `${cariKod} - Cari Hareketler`;
      } else if (firmaAdi) {
        hareketler = await this.musteriService.getFirmaCariHareketler(firmaAdi);
        raporBaslik = `${firmaAdi} - Firma Cari Hareketler`;
      } else if (tcNo) {
        const musteriBilgi = await this.musteriService.getMusteriBilgiByTCN(tcNo);
        hareketler = await this.musteriService.getCariHareketler(tcNo);
        raporBaslik = `${musteriBilgi?.MstrAdi || tcNo} - Cari Hareketler`;
      } else {
        throw new Error('TC No, Firma Adƒ± veya Cari Kod gerekli');
      }
      // Cari Hareketler PDF olu≈ütur - T√ºrk√ße karakter destekli
      const doc = new PDFDocument({ 
        size: 'A4', 
        margin: 50,
        info: {
          Title: raporBaslik,
          Author: 'G√ñK√áE PANSƒ∞YON',
          Subject: 'Cari Hareketler Raporu',
          Creator: 'G√ñK√áE PANSƒ∞YON M√º≈üteri Takip Sistemi'
        }
      });
      
      // PDF buffer'ƒ± toplamak i√ßin
      const chunks: Buffer[] = [];
      doc.on('data', chunk => chunks.push(chunk));
      
      // T√ºrk√ße font'u y√ºkle ve kullan
      try {
        const fontPath = this.getFontPath();
        if (fontPath && fs.existsSync(fontPath)) {
          doc.registerFont('Turkish', fontPath);
          doc.font('Turkish');
        } else {
          // Font bulunamazsa fallback olarak Times-Roman kullan
          doc.font('Times-Roman');
        }
      } catch (error) {
        console.warn('Font y√ºkleme hatasƒ±, varsayƒ±lan font kullanƒ±lƒ±yor:', error);
        doc.font('Times-Roman');
      }
      
      // Header
      doc.fontSize(20).text('GOKCE PANSIYON', { align: 'center' });
      doc.moveDown();
      doc.fontSize(16).text(raporBaslik, { align: 'center' });
      doc.moveDown();
      doc.fontSize(10).text(`Rapor Tarihi: ${this.formatDate(new Date())}`, { align: 'right' });
      doc.moveDown(2);
      
      const headers = ['Tarih', 'Islem Tipi', 'Aciklama', 'Tutar', 'Birim'];
      const columnWidths = [80, 80, 180, 70, 50];
      let yPosition = doc.y;
      
      doc.fontSize(9);
      headers.forEach((header, index) => {
        doc.text(header, 50 + columnWidths.slice(0, index).reduce((a, b) => a + b, 0), yPosition);
      });
      
      yPosition += 20; // Ba≈ülƒ±k satƒ±rlarƒ±ndan sonra optimal bo≈üluk
      
      doc.fontSize(8);
      if (hareketler.length === 0) {
        yPosition += 25; // Ba≈ülƒ±k satƒ±rƒ± ile ilk veri satƒ±rƒ± arasƒ±nda optimal bo≈üluk
        doc.text('Kayit bulunamadi', 50, yPosition, { width: 400 });
      } else {
        hareketler.forEach((row, index) => {
          if (yPosition > 650) {
            doc.addPage();
            yPosition = 40;
          }
          
          // Alan adlarƒ±nƒ± birebir e≈üle≈ütir
          const rowData = [
            this.formatDate(row.iKytTarihi),
            row.islemTip || '',
            row.islemBilgi || '',
            `${row.islemTutar?.toLocaleString('tr-TR') || 0} TL`,
            row.islemBirim || ''
          ];
          
          // A√ßƒ±klama s√ºtunu i√ßin √∂zel i≈ülem
          const aciklamaText = rowData[2];
          const estimatedLines = Math.ceil(aciklamaText.length / 30); // Yakla≈üƒ±k 30 karakter per satƒ±r
          const rowHeight = Math.max(20, estimatedLines * 12); // Minimum 20px, her satƒ±r i√ßin 12px
          
          // H√ºcreleri yazdƒ±r
          rowData.forEach((cell, cellIndex) => {
            const cellWidth = columnWidths[cellIndex];
            const cellX = 50 + columnWidths.slice(0, cellIndex).reduce((a, b) => a + b, 0);
            
            if (cellIndex === 2) { // A√ßƒ±klama s√ºtunu
              doc.text(cell, cellX, yPosition, { 
                width: cellWidth, 
                align: 'left'
              });
            } else {
              doc.text(cell, cellX, yPosition, { 
                width: cellWidth, 
                align: 'left' 
              });
            }
          });
          
          yPosition += rowHeight + 5; // Dinamik satƒ±r y√ºksekliƒüi + optimal bo≈üluk
        });
      }
      
      // PDF'i sonlandƒ±r
      doc.end();
      
      // PDF hazƒ±r olduƒüunda g√∂nder
      doc.on('end', () => {
        try {
          const pdfBuffer = Buffer.concat(chunks);
          
          if (pdfBuffer.length === 0) {
            throw new Error('PDF buffer bo≈ü');
          }
          
          // Response headers - UTF-8 destekli
          res.setHeader('Content-Type', 'application/pdf; charset=utf-8');
          const safeFileName = this.createSafeFileName(`${raporBaslik}-${new Date().toISOString().split('T')[0]}.pdf`);
          const safeRaporBaslik = this.createSafeFileName(raporBaslik);
          res.setHeader('Content-Disposition', `attachment; filename="${safeFileName}"; filename*=UTF-8''${encodeURIComponent(`${safeRaporBaslik}-${new Date().toISOString().split('T')[0]}.pdf`)}`);
          res.setHeader('Content-Length', pdfBuffer.length);
          
          console.log(`Cari hareketler PDF ba≈üarƒ±yla olu≈üturuldu: ${pdfBuffer.length} bytes`);
          res.send(pdfBuffer);
        } catch (bufferError) {
          console.error('Cari hareketler PDF buffer hatasƒ±:', bufferError);
          res.status(500).json({ 
            success: false, 
            message: `PDF buffer hatasƒ±: ${bufferError.message}` 
          });
        }
      });
      
      // PDF error handling
      doc.on('error', (pdfError) => {
        console.error('Cari hareketler PDF olu≈üturma hatasƒ±:', pdfError);
        if (!res.headersSent) {
          res.status(500).json({ 
            success: false, 
            message: `PDF olu≈üturma hatasƒ±: ${pdfError.message}` 
          });
        }
      });
      
    } catch (error) {
      console.error('Cari hareketler PDF rapor hatasƒ±:', error);
      res.status(500).json({ success: false, message: 'Cari hareketler PDF raporu olu≈üturulamadƒ±' });
    }
  }

  // Cari Hareketler Excel Raporu
  @Get('cari-hareketler-excel')
  async getCariHareketlerExcel(
    @Query('tcNo') tcNo: string,
    @Query('firmaAdi') firmaAdi: string,
    @Query('cariKod') cariKod: string,
    @Res() res: Response
  ) {
    try {
      let hareketler: any[] = [];
      let raporBaslik = '';
      if (cariKod) {
        hareketler = await this.musteriService.getCariHareketlerByCariKod(cariKod);
        raporBaslik = `${cariKod} - Cari Hareketler`;
      } else if (firmaAdi) {
        hareketler = await this.musteriService.getFirmaCariHareketler(firmaAdi);
        raporBaslik = `${firmaAdi} - Firma Cari Hareketler`;
      } else if (tcNo) {
        const musteriBilgi = await this.musteriService.getMusteriBilgiByTCN(tcNo);
        hareketler = await this.musteriService.getCariHareketler(tcNo);
        raporBaslik = `${musteriBilgi?.MstrAdi || tcNo} - Cari Hareketler`;
      } else {
        throw new Error('TC No, Firma Adƒ± veya Cari Kod gerekli');
      }
      // Excel verilerini hazƒ±rla - temiz ve g√ºvenli format
      const excelData = hareketler.length === 0
        ? [{ 'Tarih': '', 'Islem Tipi': '', 'Aciklama': 'Kayit bulunamadi', 'Tutar (TL)': 0, 'Birim': '' }]
        : hareketler.map(row => ({
            'Tarih': this.formatDate(row.iKytTarihi) || '',
            'Islem Tipi': (row.islemTip || '').toString(),
            'Aciklama': (row.islemBilgi || '').toString(),
            'Tutar (TL)': parseFloat(row.islemTutar) || 0,
            'Birim': (row.islemBirim || '').toString()
          }));
      // Excel workbook olu≈ütur - minimal ve g√ºvenli yakla≈üƒ±m
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(excelData);
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
      
      // Excel dosyasƒ±nƒ± olu≈ütur - minimal options
      const excelBuffer = XLSX.write(workbook, { 
        type: 'buffer', 
        bookType: 'xlsx'
      });
      
      // Response headers - UTF-8 destekli
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      const safeExcelFileName = this.createSafeFileName(`${raporBaslik}-${new Date().toISOString().split('T')[0]}.xlsx`);
      const safeRaporBaslik = this.createSafeFileName(raporBaslik);
      res.setHeader('Content-Disposition', `attachment; filename="${safeExcelFileName}"; filename*=UTF-8''${encodeURIComponent(`${safeRaporBaslik}-${new Date().toISOString().split('T')[0]}.xlsx`)}`);
      res.setHeader('Content-Length', excelBuffer.length);
      res.send(excelBuffer);
    } catch (error) {
      console.error('Cari hareketler Excel rapor hatasƒ±:', error);
      res.status(500).json({ success: false, message: 'Cari hareketler Excel raporu olu≈üturulamadƒ±' });
    }
  }
}
